
use depencency-> https://github.com/nguyenhoanglam/ImagePicker
multiple images request-> 


    private var mResults: java.util.ArrayList<String> = ArrayList()
    private var mResults1: java.util.ArrayList<Image> = ArrayList()

        MultipleImageGallery(1,mResults1)

 open fun MultipleImageGallery(code:Int,mResults1:ArrayList<Image>){
        ImagePicker.with(this)
            .setFolderMode(true)
            .setShowCamera(true)
            .setFolderTitle("Album")
            .setRootDirectoryName(Config.ROOT_DIR_DCIM)
            .setDirectoryName("Image Picker")
            .setMultipleMode(true)
            .setShowNumberIndicator(true)
            .setMaxSize(10)
            .setLimitMessage("You can select up to 10 images")
            .setRequestCode(code)
            .setSelectedImages(mResults1)
            .start();
    }
    
    
    onActivity Result-> 
     if (ImagePicker.shouldHandleResult(requestCode, resultCode, data, 1)) {
            imagesLayouts.visibility = View.VISIBLE
            mResults1 = ImagePicker.getImages(data)
            mResults.clear()
            mResultsSendFile.clear()
            for (image in mResults1) {
                Log.e("DATA",image.path)
                mResults.add("file://${image.path}")
                mResultsSendFile.add(image.path)
            }
            setImages(mResults)
        }
    
    
     @SuppressLint("NewApi")
        var currencyAdapter: ArrayAdapter<String> = object :
            ArrayAdapter<String>(
                requireContext(),
                android.R.layout.simple_spinner_item,
                listDataCurrency//list string type
            ) {

            override fun getDropDownView(
                position: Int,
                convertView: View?,
                parent: ViewGroup
            ): View {
                val v = super.getDropDownView(position, convertView, parent)
                val tv = v as TextView
                tv.setText(listDataCurrency.get(position))
                tv.setTextColor(requireActivity().getColor(R.color.TextColor))
                return v
            }


            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
                val v = super.getDropDownView(position, convertView, parent)
                val tv = v as TextView
                tv.setText(listDataCurrency.get(position))
                tv.setTextColor(requireActivity().getColor(R.color.TextColor))
                return v
            }
        }
        currencyAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
       spinnerCountry.adapter = currencyAdapter
    
    
    spinnerCountry.onItemSelectedListener=object :AdapterView.OnItemSelectedListener{
            override fun onItemSelected(
                parent: AdapterView<*>?,
                view: View?,
                position: Int,
                id: Long
            ) {
            //get id from List a
            catId=catList.get(position)
            }

            override fun onNothingSelected(parent: AdapterView<*>?) {

            }
        }
    
    /////////////////////////////////
    
    CategoriesModel spinner model class
    
    private fun setSpinner(result: ArrayList<CategoriesModel>) {
        sp_categories.adapter = object : ArrayAdapter<CategoriesModel>(
            requireActivity(),
           android.R.layout.simple_spinner_item,
            result
        ) {
            var typeface = ResourcesCompat.getFont(requireActivity(), R.font.poppins_semibold)
            override fun getDropDownView(
                position: Int,
                convertView: View?,
                parent: ViewGroup
            ): View {
                val label = super.getView(position, convertView, parent) as TextView
                label.setTypeface(typeface)
                label.text = getItem(position)?.Text
                return label
            }

            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
                val label = super.getView(position, convertView, parent) as TextView
                label.setTypeface(typeface)
                label.text = getItem(position)?.Text
                return label
            }
        }

        sp_categories.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onNothingSelected(parent: AdapterView<*>?) {

            }

            override fun onItemSelected(
                parent: AdapterView<*>?,
                view: View?,
                position: Int,
                id: Long
            ) {
                var calories = result.get(position)
                var Id = calories.Value
            }
        }
    }
    
    
    
    
    
    
